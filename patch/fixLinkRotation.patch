--- server/ModelLoader/BodyInfoCollada_impl.cpp	2014-03-28 02:11:55.079200151 +0900
+++ server/ModelLoader/BodyInfoCollada_impl.cpp	2014-03-28 02:11:40.598340377 +0900
@@ -43,6 +43,15 @@
     os << quat[0] << " " << quat[1] << " " << quat[2] << " " << quat[3];
 }
 
+#define printArrayWARN(name, ary) \
+  COLLADALOG_WARN(str(boost::format(name": %f\t%f\t%f\t%f")%ary[0]%ary[1]%ary[2]%ary[3])); \
+  COLLADALOG_WARN(str(boost::format(name": %f\t%f\t%f\t%f")%ary[4]%ary[5]%ary[6]%ary[7])); \
+  COLLADALOG_WARN(str(boost::format(name": %f\t%f\t%f\t%f")%ary[8]%ary[9]%ary[10]%ary[11]));
+#define printArrayDEBUG(name, ary) \
+  COLLADALOG_DEBUG(str(boost::format(name": %f\t%f\t%f\t%f")%ary[0]%ary[1]%ary[2]%ary[3])); \
+  COLLADALOG_DEBUG(str(boost::format(name": %f\t%f\t%f\t%f")%ary[4]%ary[5]%ary[6]%ary[7])); \
+  COLLADALOG_DEBUG(str(boost::format(name": %f\t%f\t%f\t%f")%ary[8]%ary[9]%ary[10]%ary[11]));
+#define printArray printArrayDEBUG
 /// \brief The colladadom reader that fills in the BodyInfoCollada_impl class.
 ///
 /// It is separate from BodyInfoCollada_impl so that the colladadom resources do not have to remain allocated.
@@ -560,12 +569,28 @@
         PoseIdentity(identity);
         for (size_t ilink = 0; ilink < ktec->getLink_array().getCount(); ++ilink) {
             domLinkRef pdomlink = ktec->getLink_array()[ilink];
-            DblArray12 tlocallink;
-            _ExtractFullTransform(tlocallink,pdomlink);
-            int linkindex = ExtractLink(pkinbody, pdomlink, ilink == 0 ? pnode : domNodeRef(), tlocallink, tlocallink, vdomjoints, bindings);
-            // root link
-	    boost::shared_ptr<LinkInfo> plink = _veclinks.at(linkindex);
-            AxisAngleTranslationFromPose(plink->rotation,plink->translation,tlocallink);
+            //
+            _ExtractFullTransform(rootOrigin, pdomlink);
+            printArray("rootOrigin", rootOrigin);
+            domNodeRef pvisualnode;
+            FOREACH(it, bindings.listKinematicsVisualBindings) {
+              if(strcmp(it->first->getName() ,pdomlink->getName()) == 0) {
+                pvisualnode = it->first;
+                break;
+              }
+            }
+            if (!!pvisualnode) {
+              getNodeParentTransform(visualRootOrigin, pvisualnode);
+              printArray("visualRootOrigin", visualRootOrigin);
+            }
+            //
+            DblArray12 identity;
+            PoseIdentity(identity);
+            int linkindex = ExtractLink(pkinbody, pdomlink, ilink == 0 ? pnode : domNodeRef(),
+                                        identity, identity, vdomjoints, bindings);
+
+            boost::shared_ptr<LinkInfo> plink = _veclinks.at(linkindex);
+            AxisAngleTranslationFromPose(plink->rotation,plink->translation,rootOrigin);
         }
 
         for (size_t iform = 0; iform < ktec->getFormula_array().getCount(); ++iform) {
@@ -698,7 +723,7 @@
     }
 
     ///  \brief Extract Link info and add it to an existing body
-    int  ExtractLink(BodyInfoCollada_impl* pkinbody, const domLinkRef pdomlink,const domNodeRef pdomnode, const DblArray12& tBaseLink, const DblArray12& tParentLink, const std::vector<domJointRef>& vdomjoints, const KinematicsSceneBindings bindings) {
+    int  ExtractLink(BodyInfoCollada_impl* pkinbody, const domLinkRef pdomlink,const domNodeRef pdomnode, const DblArray12& tParentWorldLink, const DblArray12& tParentLink, const std::vector<domJointRef>& vdomjoints, const KinematicsSceneBindings bindings) {
         const std::list<JointAxisBinding>& listAxisBindings = bindings.listAxisBindings;
 
         //  Set link name with the name of the COLLADA's Link
@@ -762,13 +787,15 @@
         else {
             COLLADALOG_DEBUG(str(boost::format("Attachment link elements: %d")%pdomlink->getAttachment_full_array().getCount()));
             // use the kinematics coordinate system for each link
-            DblArray12 tlink,tlocallink;
-            _ExtractFullTransform(tlocallink,pdomlink);
-            PoseMult(tlink,tParentLink,tlocallink);
-          
-            // Get the geometry
-	    ExtractGeometry(pkinbody,plink,tParentLink,pdomnode,listAxisBindings,std::vector<std::string>());
-            
+            DblArray12 tlink;
+            _ExtractFullTransform(tlink, pdomlink);
+            {
+              DblArray12 tgeomlink;
+              PoseMult(tgeomlink, tParentWorldLink, tlink);
+              COLLADALOG_DEBUG(str(boost::format("geom_link:%s")%linkname.c_str()));
+              printArray("geom", tgeomlink);
+              ExtractGeometry(pkinbody,plink,tgeomlink,pdomnode,listAxisBindings,std::vector<std::string>());
+            }
             COLLADALOG_DEBUG(str(boost::format("After ExtractGeometry Attachment link elements: %d")%pdomlink->getAttachment_full_array().getCount()));
           
             if( !!rigidbody && !!rigidbody->getTechnique_common() ) {
@@ -782,15 +809,17 @@
                     plink->inertia[8] = rigiddata->getInertia()->getValue()[2];
                 }
                 if( !!rigiddata->getMass_frame() ) {
-                     DblArray12  tmass, ttemp1, ttemp2, tframe, tlocalmass;
-		     // tmass uses tBaseLink frame
-		     _ExtractFullTransform(ttemp2, rigiddata->getMass_frame());
-		     PoseMult(tmass,tBaseLink,ttemp2);
-		     // convert to local frame
-		     getNodeParentTransform(ttemp2,pdomnode);
-		     PoseMult(ttemp1,ttemp2,tParentLink);
-		     PoseInverse(tframe,ttemp1);
-		     PoseMult(tlocalmass,tframe,tmass);
+                     DblArray12 atemp1,atemp2,atemp3,tlocalmass;
+                     printArray("tlink", tlink);
+                     printArray("plink", tParentWorldLink);
+                     PoseMult(atemp1, tParentWorldLink, tlink);
+                     PoseInverse(atemp2, rootOrigin);
+                     PoseMult(atemp3, atemp2, atemp1);
+                     PoseInverse(atemp1, atemp3);
+                     _ExtractFullTransform(atemp2, rigiddata->getMass_frame());
+                     PoseMult(tlocalmass, atemp1, atemp2);
+                     printArray("i_org", tlocalmass);
+
 		     plink->centerOfMass[0] = tlocalmass[3];
 		     plink->centerOfMass[1] = tlocalmass[7];
 		     plink->centerOfMass[2] = tlocalmass[11];
@@ -884,7 +913,14 @@
 
                 
                 DblArray12 tnewparent;
-                int ijointindex = ExtractLink(pkinbody, pattfull->getLink(), pchildnode, tBaseLink, tatt, vdomjoints, bindings);
+                {
+                  DblArray12 ttemp;
+                  PoseMult(ttemp, tParentWorldLink, tlink);
+                  PoseMult(tnewparent, ttemp, tatt);
+                }
+                int ijointindex = ExtractLink(pkinbody, pattfull->getLink(), pchildnode,
+                                              tnewparent,
+                                              tatt, vdomjoints, bindings);
                 boost::shared_ptr<LinkInfo> pjoint = _veclinks.at(ijointindex);
                 int cindex = plink->childIndices.length();
                 plink->childIndices.length(cindex+1);
@@ -894,10 +930,11 @@
                 if ( ilinkindex == 0 ){ // due to  ExtractKinematicsModel calls ExtractLink with identity
                     memcpy(tnewparent, tatt, sizeof(tatt));
                 } else {
-                    PoseMult(tnewparent,tlocallink,tatt);
+                    DblArray12 ttemp;
+                    _ExtractFullTransform(ttemp, pattfull->getLink());
+                    PoseMult(tnewparent, tatt, ttemp);
                 }
                 AxisAngleTranslationFromPose(pjoint->rotation,pjoint->translation,tnewparent);
-                //AxisAngleTranslationFromPose(pjoint->rotation,pjoint->translation,tatt);
 
                 bool bActive = true; // if not active, put into the passive list
 
@@ -977,9 +1014,13 @@
                 }
                 if( len2 > 0 ) {
                     len2 = 1/len2;
-                    pjoint->jointAxis[0] = pdomaxis->getAxis()->getValue()[0]*len2;
-                    pjoint->jointAxis[1] = pdomaxis->getAxis()->getValue()[1]*len2;
-                    pjoint->jointAxis[2] = pdomaxis->getAxis()->getValue()[2]*len2;
+                    double ax = pdomaxis->getAxis()->getValue()[0]*len2;
+                    double ay = pdomaxis->getAxis()->getValue()[1]*len2;
+                    double az = pdomaxis->getAxis()->getValue()[2]*len2;
+                    pjoint->jointAxis[0] = tatt[0] * ax + tatt[1] * ay + tatt[2] * az;
+                    pjoint->jointAxis[1] = tatt[4] * ax + tatt[5] * ay + tatt[6] * az;
+                    pjoint->jointAxis[2] = tatt[8] * ax + tatt[9] * ay + tatt[10] * az;
+                    COLLADALOG_DEBUG(str(boost::format("axis: %f %f %f -> %f %f %f")%ax%ay%az%pjoint->jointAxis[0]%pjoint->jointAxis[1]%pjoint->jointAxis[2]));
                 }
                 else {
                     pjoint->jointAxis[0] = 0;
@@ -988,7 +1029,7 @@
                 }
                 //  Rotate axis from the parent offset
                 //PoseRotateVector(pjoint->jointAxis,tatt,pjoint->jointAxis);
-                COLLADALOG_DEBUG(str(boost::format("joint %s has axis: %f %f %f")%jointname%pjoint->jointAxis[0]%pjoint->jointAxis[1]%pjoint->jointAxis[2]));
+                COLLADALOG_WARN(str(boost::format("joint %s has axis: %f %f %f")%jointname%pjoint->jointAxis[0]%pjoint->jointAxis[1]%pjoint->jointAxis[2]));
 
                 if( !motion_axis_info ) {
                     COLLADALOG_WARN(str(boost::format("No motion axis info for joint %s")%pjoint->name));
@@ -1167,10 +1208,15 @@
             return false;
         }
 
-        DblArray12 tmnodegeom, ttemp, ttemp2;
-        PoseInverse(ttemp,tlink);
-        _ExtractFullTransform(ttemp2, pdomnode);
-        PoseMult(tmnodegeom,ttemp,ttemp2);
+        DblArray12 tmnodegeom, ttemp1, ttemp2, ttemp3;
+        PoseInverse(ttemp1, visualRootOrigin);
+        getNodeParentTransform(ttemp2, pdomnode);
+        PoseMult(ttemp3, ttemp1, ttemp2);
+        _ExtractFullTransform(ttemp1, pdomnode);
+        PoseMult(ttemp2, ttemp3, ttemp1);
+        PoseInverse(ttemp1, tlink);
+        PoseMult(tmnodegeom, ttemp1, ttemp2);
+        printArray("tmnodegeom", tmnodegeom);
 
         // there is a weird bug with the viewer, but should try to normalize the rotation!
         DblArray4 quat;
@@ -3213,6 +3259,8 @@
     std::vector<std::string> _veclinknames;
     int _nGlobalSensorId, _nGlobalActuatorId, _nGlobalManipulatorId, _nGlobalIndex;
     std::string _filename;
+    DblArray12 rootOrigin;
+    DblArray12 visualRootOrigin;
 };
 
 BodyInfoCollada_impl::BodyInfoCollada_impl(PortableServer::POA_ptr poa) :
